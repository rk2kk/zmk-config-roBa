#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>


#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors/rgbled_widget.dtsi>

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>


#define DEFAULT 0
#define NUMPAD_AND_ARROWS 1
#define FUNCTIONS_AND_SYMBOLS 2
#define MISC 3
#define ALT_TAB 4
#define CTRL_TAB 5
#define CTRL_ALT_TAB_TB 6
#define ALT_TAB_TB 7
#define CTRL_TAB_TB 8
#define MOUSE 9
#define MEDIA 10
#define EXTRA_FINCTIONS 11
#define CONFIGURATION 12

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#include <layout_shift_kp_override.dtsi>

#include <mouse-gesture.dtsi>


&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};


&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

&sk { release-after-ms = <700>; };

&sl { release-after-ms = <1000>; };

&mkp_input_listener { input-processors = <&zip_temp_layer MOUSE 10000>; };


&zip_temp_layer {
    require-prior-idle-ms = <200>;
    excluded-positions = <
        18 // J
        19 // K
        20 // L
        21 // ;
        22 // Z
        // 31 // .
        // 32 // ,
        // 33 // /
        34 // Ctrl
        42
    >;
};

/ {
    layer_listeners {
        compatible = "zmk,layer-listeners";

        release_alt {
            layers = <ALT_TAB ALT_TAB_TB>;
            bindings = <&kt_on LEFT_ALT &kt_off LEFT_ALT>;
        };

        release_ctrl {
            layers = <CTRL_TAB CTRL_TAB_TB>;
            bindings = <&kt_on LCTRL &kt_off LCTRL>;
        };

        // AML_indicator {
        //     layers = <MOUSE>;
        //     bindings = <&kp LS(LA(LC(LG(H)))) &kp LS(LA(LC(LG(H))))>;
        // };
        // AML {
        //     layers = <MOUSE>;
        //     bindings = <&to MOUSE &none>;
        // };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        zenkaku-hankaku {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp LS(MINUS)>;
            key-positions = <24 25>;
        };

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        lang2 {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <22 23>;
        };
    };

    macros {
        mo_exit_alttab: mo_exit_alttab_ctrltab {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&tog_off ALT_TAB &tog_off CTRL_TAB>;
        };

        to_kp: to_kp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "to_kp";
        };

        mo_to_0: mo_to_0 {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =

                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to 0>;

            label = "MO_to_0";
        };
            
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        tog_off: toggle_layer_off {
                compatible = "zmk,behavior-toggle-layer";
                #binding-cells = <1>;
                display-name = "Toggle Layer Off";
                toggle-mode = "off";
             };

            kt_on: key_toggle_on_only {
                compatible = "zmk,behavior-key-toggle";
                #binding-cells = <1>;
                display-name = "Key Toggle On";
                toggle-mode = "on";
            };

            kt_off: key_toggle_off_only {
                compatible = "zmk,behavior-key-toggle";
                #binding-cells = <1>;
                display-name = "Key Toggle Off";
                toggle-mode = "off";
            };

            lt_to_0: lt_to_0 {
                compatible = "zmk,behavior-hold-tap";
                label = "LT_to_0";
                bindings = <&mo_to_0>, <&kp>;

                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
                flavor = "balanced";
            };

            lt_exit_alttab: lt_exit_alttab_ctrltab_on_hold_release {
                compatible = "zmk,behavior-hold-tap";
                bindings = <&mo_exit_alttab>, <&kp>;

                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
                flavor = "balanced";
             };


            scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
                compatible = "zmk,behavior-sensor-rotate";
                #sensor-binding-cells = <0>;
                bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
                tap-ms = <20>;
            };

            encoder_volume: encoder_volume {
                compatible = "zmk,behavior-sensor-rotate";
                #sensor-binding-cells = <0>;
                bindings = <&kp C_VOLUME_DOWN>, <&kp C_VOLUME_UP>;
            };

            td_bt_clear: td_bt_clear {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                bindings = <&none>, <&none>, <&bt BT_CLR>;

                tapping-term-ms = <250>;
            };

            td_bt_clear_all: td_bt_clear_all {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <250>;
                bindings = <&none>, <&none>, <&bt BT_CLR_ALL>;
            };

    };

    keymap {
        compatible = "zmk,keymap";

   DEFAULT {
            bindings = <
&mt LWIN  Q       &kp W             &kp E         &kp R                               &lt 12 T                                                                                     &lt 12 Y                 &kp U  &kp I      &kp O    &lt 11 P
&mt LCTRL A       &kp S             &kp D         &kp F                               &kp G                    &kp LEFT_SHIFT                          &lt 6 MINUS                 &kp H                    &kp J  &kp K      &kp L    &lt 12 MINUS //layer 5
&mt LEFT_SHIFT Z  &mt LC(X) X       &mt LC(C) C   &mt LC(V) V                         &kp B                    &mt LCTRL ESCAPE                        &kp DEL                     &kp N                    &kp M  &kp COMMA  &kp DOT  &lt 4 SLASH
&kp LCTRL         &kp LEFT_WIN      &kp LEFT_ALT  &lt_exit_alttab 1 INTERNATIONAL_5   &lt_exit_alttab 3 SPACE  &lt_exit_alttab 4 INTERNATIONAL_4       &lt_exit_alttab 4 BACKSPACE &lt_exit_alttab 2 ENTER                            &kp RIGHT_SHIFT
            >;
        
            sensor-bindings = <&scroll_up_down>;
        };

        NUMPAD_AND_ARROWS {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)                               &kp MINUS        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LS(SQT)   &kp KP_NUMLOCK      &trans   &kp SLASH        &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &kp LS(SQT)
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp LS(MINUS)       &trans   &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD
&trans                      &trans           &trans           &trans           &trans        &trans              &kp DEL  &trans                                                              &kp LEFT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp LC(PLUS) LC(MINUS)>;
        };

        FUNCTIONS_AND_SYMBOLS {
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5                         &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)  &trans      &trans  &kp F11  &kp F12  &trans  &trans  &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans      &trans  &trans   &trans   &trans  &trans  &trans
&trans     &trans     &trans     &trans     &trans     &trans      &trans  &trans                            &trans
            >;
        };

        MISC {
            bindings = <
&to_kp 5 TAB          &kp LC(LG(LEFT))        &kp LG(TAB)       &kp LG(LC(RIGHT))        &kp F4                                                             &kp F4      &trans                    &trans                 &trans             &to_kp 5 TAB
&to_kp 6 TAB          &kp LG(LS(LEFT_ARROW))  &kp LG(UP_ARROW)  &kp LG(LS(RIGHT_ARROW))  &kp F5            &trans               &kp C_VOLUME_UP             &kp F5      &kp LC(PAGE_UP)  &kp UP_ARROW           &kp LC(PAGE_DOWN)  &to_kp 6 TAB
&kp LA(LC(LG(DOWN)))  &kp LG(LEFT_ARROW)      &kp LG(DOWN)      &kp LG(RIGHT_ARROW)      &trans            &trans               &kp C_VOLUME_DOWN           &kp K_MUTE  &kp LA(LEFT)              &kp DOWN               &kp LA(RIGHT)      &trans
&trans                &trans                  &trans            &trans                   &trans            &trans               &kp DELETE                  &trans                                                                          &trans
            >;

            sensor-bindings = <&encoder_volume>;
        };

        ALT_TAB {
            bindings = <
&kp TAB      &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &kp TAB
&kp LS(TAB)  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp LS(TAB)
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        CTRL_TAB {
            bindings = <
&kp LS(TAB)  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &kp LS(TAB)
&kp TAB      &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp TAB
&kp LS(TAB)  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp LS(TAB)
&trans       &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        CTRL_ALT_TAB_TB {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        ALT_TAB_TB {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        CTRL_TAB_TB {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        MEDIA {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp C_PREV         &kp C_PLAY_PAUSE   &kp C_NEXT       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp C_VOLUME_DOWN  &kp C_MUTE         &kp C_VOLUME_UP  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans             &kp LS(LA(LC(M)))  &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                         &trans
            >;
        };


        CONFIGURATION {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &none         &none         &out OUT_TOG  &sys_reset      &bootloader
&sys_reset    &bootloader   &none         &none         &none         &trans      &ind_con      &ind_bat      &none         &none         &none           &none
&none         &none         &none         &none         &none         &none       &none         &none         &none         &none         &none           &td_bt_clear
&none         &none         &none         &none         &none         &none       &none         &none                                                     &td_bt_clear_all
            >;
        };
    };

};
