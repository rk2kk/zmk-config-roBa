#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        zenkaku-hankaku {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp LS(MINUS)>;
            key-positions = <24 25>;
        };

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        test {
            bindings = <&kp LS(CAPSLOCK)>;
            key-positions = <8 9>;
        };

        lang2 {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <22 23>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESCAPE Q      &kp W         &kp E         &kp R                        &kp T                                                                            &kp Y               &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                        &kp G                   &lt_to_layer_0 7 MINUS           &lt_to_layer_0 7 MINUS  &lt_to_layer_0 5 H  &kp J  &kp K      &kp L    &kp SEMI
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                        &kp B                   &lt_to_layer_0 8 LS(MINUS)       &kp DEL                 &kp N               &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 INT_HENKAN  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 3 INT_MUHENKAN    &kp BACKSPACE           &lt 1 ENTER                                    &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION_NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp N0
&kp MINUS     &kp EQUAL     &kp INT3      &trans        &trans  &trans    &trans  &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans  &trans    &trans  &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans  &trans    &trans  &trans                                                  &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)                            &kp MINUS        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LS(SQT)   &kp KP_NUMLOCK    &trans  &kp SLASH        &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &kp LS(SQT)
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp LS(MINUS)     &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD
&trans                      &trans           &trans           &trans           &trans        &trans            &trans  &trans                                                              &kp LS(MINUS)
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                             &trans              &kp LG(UP_ARROW)    &trans               &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans            &trans  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(DOWN_ARROW)   &kp SQT           &kp NUHS
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &kp LEFT_SHIFT    &trans  &kp LS(LEFT_ARROW)  &trans              &kp LS(RIGHT_ARROW)  &trans            &kp INT1
&trans          &trans                  &trans          &trans                   &trans   &trans            &trans  &trans                                                                         &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB4  &trans    &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        BT-settings {
            bindings = <
&bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans                         &trans  &trans  &trans  &trans  &bt BT_SEL 0
&trans        &trans        &trans        &trans        &trans  &trans    &trans       &trans  &trans  &trans  &trans  &trans
&trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans    &bootloader  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans        &trans        &trans        &trans        &trans  &trans    &trans       &trans                          &bt BT_CLR_ALL
            >;
        };

        Function {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                    &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F11  &kp F12  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans   &trans   &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                            &trans
            >;
        };

        FUNCTION_NUM_1 {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                    &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(N0)
&kp LS(MINUS)     &kp LS(EQUAL)     &kp LS(INT3)      &trans            &trans      &trans    &trans  &trans            &trans            &trans            &trans            &trans
&trans            &trans            &trans            &trans            &trans      &trans    &trans  &trans            &trans            &trans            &trans            &kp LS(INTERNATIONAL_1)
&trans            &trans            &trans            &trans            &trans      &trans    &trans  &trans                                                                  &trans
            >;
        };
    };
};
