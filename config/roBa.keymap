#define ZMK_POINTING_DEFAULT_SCRL_VAL 1000

// #define ZMK_POINTING_DEFAULT_MOVE_VAL 700

#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors/rgbled_widget.dtsi>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#define ZMK_POINTING_DEFAULT_SCRL_VAL 1000

#include <layout_shift_kp_override.dtsi>

#include <mouse-gesture.dtsi>


#define DEFAULT 0
#define FUNCTION_NUM 1
#define NUM 2
#define MOUSE 3
#define ARROW 4
#define SCROLL 5
#define VOLUME 6
#define ALTTAB 7
#define CTRLTAB 8




&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};


&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

&sk { release-after-ms = <700>; };

&sl { release-after-ms = <1000>; };

&mkp_input_listener { input-processors = <&zip_temp_layer MOUSE 10000>; };

&trackball { cpi = <700>; };

&zip_temp_layer {
    require-prior-idle-ms = <200>;
    excluded-positions = <
        18 // J
        19 // K
        20 // L
        21 // ;
        22 // Z
        31 // .
        32 // ,
        // 33 // /
        34 // Ctrl
        42
    >;
};

&zip_mouse_gesture {
    stroke-size = <150>;
    movement-threshold = <10>;
    // enable-eager-mode;

    history_back {
        pattern = <GESTURE_RIGHT>;
        bindings = <&kp LA(LEFT)>;
    };

    history_forward {
        pattern = <GESTURE_LEFT>;
        bindings = <&kp LA(RIGHT)>;
    };

    close_tab {
        pattern = <GESTURE_DOWN GESTURE_RIGHT>;
        bindings = <&kp LC(W)>;
    };

    new_tab {
        pattern = <GESTURE_DOWN GESTURE_LEFT>;
        bindings = <&kp LC(T)>;
    };

    app_switcher {
        pattern = <GESTURE_DOWN GESTURE_UP>;
        bindings = <&kp LG(TAB)>;
    };

    virtual_desktop_prev {
        pattern = <GESTURE_LEFT GESTURE_DOWN>;
        bindings = <&kp LG(LC(LEFT))>;
    };

    virtual_desktop_next {
        pattern = <GESTURE_RIGHT GESTURE_DOWN>;
        bindings = <&kp LG(LC(RIGHT))>;
    };

    // left {
    //     gesture = <GESTURE_LEFT>;
    //     bindings = <&kp LEFT>;
    // };

    // right {
    //     gesture = <GESTURE_RIGHT>;
    //     bindings = <&kp RIGHT>;
    // };

    // up {
    //     gesture = <GESTURE_UP>;
    //     bindings = <&kp UP>;
    // };

    // down {
    //     gesture = <GESTURE_DOWN>;
    //     bindings = <&kp DOWN>;
    // };
};


&trackball_listener {
    compatible = "zmk,input-listener";
    input-processors = <&zip_mouse_gesture>;

    auto-mouse-layer {
        layers = <DEFAULT MOUSE>;
        input-processors = <&zip_temp_layer MOUSE 10000>;
        process-next;
    };

    scroller {
        layers = <SCROLL>;
        input-processors =
            <&zip_xy_scaler 1 7>,
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_to_scroll_mapper>;
        process-next;
    };

     arrows {
        input-processors = <&zip_arrows>;
        layers = <ARROW>, <NUM>;
        process-next;
    };

    volume {
        input-processors = <&zip_volume>;
        layers = <VOLUME>;
        process-next;
    };   

    alt_tab {
        input-processors = <&zip_alt_tab>;
        layers = <ALTTAB>;
        process-next;
    };   

    ctrl_tab {
        input-processors = <&zip_ctrl_tab>;
        layers = <CTRLTAB>;
        process-next;
    };

};

/ {
    input_processors {
        wheel_x_scaler: wheel_x_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_HWHEEL>;
            track-remainders;
        };

        zip_arrows: zip_arrows {
        compatible = "zmk,input-processor-keybind";
        #input-processor-cells = <0>;
        track_remainders;
        bindings = <&kp RIGHT>,
                   <&kp LEFT>,
                   <&kp UP>,
                   <&kp DOWN>;
        tick = <40>;
        wait-ms = <0>;
        tap-ms = <10>;
        };

        zip_volume: zip_volume {
        compatible = "zmk,input-processor-keybind";
        #input-processor-cells = <0>;
        track_remainders;
        bindings =  <&none>, <&none>, <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;
        tick = <40>;
        wait-ms = <0>;
        tap-ms = <10>;
        };
        
        zip_alt_tab: zip_alt_tab {
        compatible = "zmk,input-processor-keybind";
        #input-processor-cells = <0>;
        track_remainders;
        bindings = <&kp LA(TAB)>, <&kp LA(LS(TAB))>, <&kp UP>,<&kp DOWN>;
        tick = <80>;
        wait-ms = <0>;
        tap-ms = <10>;
        };

        zip_ctrl_tab: zip_ctrl_tab {
        compatible = "zmk,input-processor-keybind";
        #input-processor-cells = <0>;
        track_remainders;
        bindings = <&kp LC(TAB)>, <&kp LC(LS(TAB))>, <&none>, <&none>;
        tick = <80>;
        wait-ms = <0>;
        tap-ms = <10>;
        };

    };


    layer_listeners {
        compatible = "zmk,layer-listeners";

        release_alt {
        layers = <ALTTAB>;
           bindings = <&kt_off LEFT_ALT>;
        };

        release_ctrl {
            layers = <CTRLTAB>;
            bindings = <&kt_off LCTRL>;
       };

        // AML_indicator {
        //     layers = <MOUSE>;
        //     bindings = <&kp LS(LA(LC(LG(H)))) &kp LS(LA(LC(LG(H))))>;
        // };
        // AML {
        //     layers = <MOUSE>;
        //     bindings = <&to MOUSE &none>;
        // };
    };

combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        zenkaku {
            bindings = <&td_ZenkakuHankaku>;
            key-positions = <10 11>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp LS(MINUS)>;
            key-positions = <24 25>;
        };

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        ctrl-tab {
            bindings = <&mo 8>;
            key-positions = <38 37>;
        };

        mouse {
            bindings = <&mo 4>;
            key-positions = <13 14>;
        };
    };
    
    macros {
         /omit-if-no-ref/

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 3>;
        };

        /omit-if-no-ref/

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
        };

        /omit-if-no-ref/

        mod_exit_AML: mod_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };

        /omit-if-no-ref/

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 10>;
        };

        /omit-if-no-ref/

        mo_exit_AML: mo_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>;
        };

        /omit-if-no-ref/

        mo_exit_alttab: mo_exit_alttab_ctrltab {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&tog_off ALTTAB &tog_off CTRLTAB>;
        };

        /omit-if-no-ref/

        kp_to: kp_to {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
        };

        /omit-if-no-ref/

        to_kp: to_kp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
        };

        mo_to_0: mo_to_0 {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =

                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to 0>;

            label = "MO_to_0";
        };

        /omit-if-no-ref/

        zoom_in: zoom_in {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt_on LCTRL &msc SCRL_UP &kt_off LCTRL>;
        };

        /omit-if-no-ref/

        zoom_out: zoom_out {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt_on LCTRL &msc SCRL_DOWN &kt_off LCTRL>;
        };

        /omit-if-no-ref/

        eager_tap_dance: eager_tap_dance {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML &macro_param_2to1 &sl_250 MACRO_PLACEHOLDER>;
        };
            
    };

    behaviors {
            /omit-if-no-ref/

        tog_on: toggle_layer_on {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        /omit-if-no-ref/

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        /omit-if-no-ref/

        kt_on: key_toggle_on_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle On";
            toggle-mode = "on";
        };

        /omit-if-no-ref/

        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };

        /omit-if-no-ref/

        td_right_click: td_right_click {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mkp RCLK>, <&kp LC(W)>;

            tapping-term-ms = <250>;
        };

        /omit-if-no-ref/

        td_colon: td_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            tapping-term-ms = <250>;
        };

        /omit-if-no-ref/

        td_q_escape: td_q_escape {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };

        /omit-if-no-ref/

        td_ZenkakuHankaku: td_ZenkakuHankaku {
            compatible = "zmk,behavior-tap-dance";

            // compatible = "zmk,behavior-eager-tap-dance";

            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LANGUAGE_2>, <&kp LANGUAGE_1>;
        };

        /omit-if-no-ref/

        td_ZenkakuHankaku_exit_AML: td_ZenkakuHankaku_exit_AML {
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&td_ZenkakuHankaku &exit_AML>;
        };

        /omit-if-no-ref/

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kt_on MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &sk MACRO_PLACEHOLDER &macro_param_1to1 &kt_off MACRO_PLACEHOLDER>;
        };

        /omit-if-no-ref/

        windows_sleep: windows_sleep {
            compatible = "zmk,behavior-macro";
            wait-ms = <200>;
            tap-ms = <100>;
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };

        /omit-if-no-ref/

        screensot_save: screensot_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F11)>;
            label = "SCREENSOT_SAVE";
        };

        mkp_with_mod: mkp_with_mod {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_param_2to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_2to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "MKP_WITH_MOD";
        };

        /omit-if-no-ref/

        screenshot_copy: screenshot_copy {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LA(PRINTSCREEN)>, <&kp LA(PRINTSCREEN)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        /omit-if-no-ref/

        mod_morph_exclamation: mod_morph_exclamation {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COMMA>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        /omit-if-no-ref/

        mod_morph_question: mod_morph_question {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        /omit-if-no-ref/

        mod_morph_slash: mod_morph_slash {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        /omit-if-no-ref/

        td_alt_f4: td_alt_f4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp LA(F4)>;

            tapping-term-ms = <250>;
        };

        /omit-if-no-ref/

        lt_exit_AML: lt_exit_AML {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo_exit_AML>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        /omit-if-no-ref/

        lt_exit_AML_on_hold: lt_exit_AML_on_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo_exit_AML>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        /omit-if-no-ref/

        lt_exit_alttab: lt_exit_alttab_ctrltab_on_hold_release {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo_exit_alttab>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        /omit-if-no-ref/

        mt_exit_AML: mt_exit_AML {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mod_exit_AML>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        /omit-if-no-ref/

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        /omit-if-no-ref/

        encoder_zoom: encoder_zoom {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&zoom_out>, <&zoom_in>;
        };

        /omit-if-no-ref/

        encoder_volume: encoder_volume {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_DOWN>, <&kp C_VOLUME_UP>;
        };

        /omit-if-no-ref/

        sl_250: sl_250 {
            compatible = "zmk,behavior-sticky-key";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <250>;
        };

        /omit-if-no-ref/

        td_bt_clear: td_bt_clear {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&none>, <&none>, <&bt BT_CLR>;

            tapping-term-ms = <250>;
        };

        /omit-if-no-ref/

        td_bt_clear_all: td_bt_clear_all {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&none>, <&none>, <&bt BT_CLR_ALL>;
        };

        /omit-if-no-ref/

        td_copy_paste: td_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp_exit_AML LC(C)>, <&kp_exit_AML LC(V)>;

            tapping-term-ms = <250>;
        };

         lt_to_0: lt_to_0 {
                compatible = "zmk,behavior-hold-tap";
                label = "LT_to_0";
                bindings = <&mo_to_0>, <&kp>;

                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
                flavor = "balanced";
         };

      scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = <20>;
        };

        

    };

    keymap {
        compatible = "zmk,keymap";

        home_layer {
            bindings = <
&mt LWIN Q                        &kp W         &kp E         &kp R                  &kp T                                                                        &kp Y                 &kp U      &kp I      &kp O    &kp P
&mt LCTRL A                       &kp S         &kp D         &kp F                  &kp G                 &mkp MB3                         &lt_exit_AML 6 MINUS  &kp H                 &kp J      &kp K      &kp L    &lt_exit_AML 5 SEMICOLON
&mt_exit_AML_on_tap LEFT_SHIFT Z  &mt LC(X) X   &mt LC(C) C   &mt LC(V) V            &kp B                 &lt_exit_alttab 7 EQUAL          &kp DEL               &kp N                 &kp M      &kp COMMA  &kp DOT  &lt_exit_AML 4 SLASH
&kp LCTRL                         &kp LEFT_WIN  &kp LEFT_ALT  &lt 5 INTERNATIONAL_5  &lt_exit_AML 4 SPACE  &lt_exit_AML 2 INTERNATIONAL_4   &kp BACKSPACE         &lt_exit_AML 1 ENTER                                 &kp_exit_AML RIGHT_SHIFT
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        FUNCTION_NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                      &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp N0
&kp MINUS     &kp EQUAL     &kp INT3      &trans        &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &trans                                                  &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)                              &kp MINUS        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LS(SQT)   &kp KP_NUMLOCK      &trans  &kp SLASH        &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &kp LS(SQT)
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp LS(MINUS)       &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD
&trans                      &trans           &trans           &trans           &trans        &trans              &trans  &trans                                                              &kp LEFT_SHIFT
            >;
        };

        MOUSE {
            bindings = <
&trans          &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &mouse_gesture
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &mkp MB4  &mkp MB5  &mouse_gesture
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
>;
        };


        ARROW {
            bindings = <
&kp ESCAPE  &kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &trans                         &kp LC(LG(LEFT_ARROW))  &kp LG(UP_ARROW)    &kp LC(LG(RIGHT_ARROW))  &kp LEFT_BRACKET     &kp RIGHT_BRACKET
&kp HOME    &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END    &trans      &trans  &kp LG(LEFT_ARROW)      &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)      &kp SQT              &kp NUHS
&kp LC(Z)   &kp LC(X)        &kp LC(C)       &kp LC(V)        &kp LC(B)  &trans      &trans  &kp LS(LG(LEFT_ARROW))  &none               &kp LS(LG(RIGHT_ARROW))  &kp LS(RIGHT_ARROW)  &kp INT1
&trans      &trans           &trans          &trans           &trans     &trans      &trans  &trans                                                                                    &kp RIGHT_SHIFT
            >;
        };

        SCROLL {
            bindings = <
&bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3  &bt BT_SEL 4     &trans                      &trans  &trans    &trans    &trans    &bt BT_SEL 0
&trans        &kp LA(LEFT_BRACKET)  &trans        &kp LS(LA(TAB))  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans        &kp NUMBER_1          &kp NUMBER_2  &kp NUMBER_3     &trans  &trans      &trans  &trans  &trans    &mkp MB4  &mkp MB5  &td_bt_clear
&trans        &trans                &trans        &trans           &trans  &trans      &trans  &trans                                &td_bt_clear_all
            >;
        };

        Function {
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5                         &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)  &trans      &trans  &kp F11  &kp F12  &trans  &trans  &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans      &trans  &trans   &trans   &trans  &trans  &trans
&trans     &trans     &trans     &trans     &trans     &trans      &trans  &trans                            &trans
            >;
        };

        FUNCTION_NUM_1 {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                      &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(N0)
&kp LS(MINUS)     &kp LS(EQUAL)     &kp LS(INT3)      &trans            &trans      &trans      &trans  &trans            &trans            &trans            &trans            &trans
&trans            &trans            &trans            &trans            &trans      &trans      &trans  &trans            &trans            &trans            &trans            &kp LS(INTERNATIONAL_1)
&trans            &trans            &trans            &trans            &trans      &trans      &trans  &trans                                                                  &trans
            >;
        };

        alt_tab {
            bindings = <
&kp TAB  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &kp TAB
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp LA(TAB)
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
       };


        ctrl_tab {
            bindings = <
&kp TAB  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &kp TAB
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp LA(TAB)
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
       };

        MEDIA {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp C_PREV         &kp C_PLAY_PAUSE   &kp C_NEXT       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp C_VOLUME_DOWN  &kp C_MUTE         &kp C_VOLUME_UP  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans             &kp LS(LA(LC(M)))  &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                         &trans
            >;
        };


        CONFIGURATION {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &none         &none         &out OUT_TOG  &sys_reset      &bootloader
&sys_reset    &bootloader   &none         &none         &none         &trans      &ind_con      &ind_bat      &none         &none         &none           &none
&none         &none         &none         &none         &none         &none       &none         &none         &none         &none         &none           &td_bt_clear
&none         &none         &none         &none         &none         &none       &none         &none                                                     &td_bt_clear_all
            >;
        };
    };
};
