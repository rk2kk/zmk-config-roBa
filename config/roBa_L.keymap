#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define NUM 2
#define MOUSE 3
#define YAJIRUSHI 4
#define SCROLL 5
#define VOLUME 6
#define ALTTAB 7
#define CTRLTAB 8

&mt {
    flavor = "hold-preferred";
    quick-tap-ms = <0>;
};

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <0>;
};

&sk { release-after-ms = <700>; };

&sl { release-after-ms = <1000>; };

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        zenkaku {
            bindings = <&td_ZenkakuHankaku>;
            key-positions = <10 11>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp LS(MINUS)>;
            key-positions = <24 25>;
        };

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        ctrl-tab {
            bindings = <&mo 8>;
            key-positions = <38 37>;
        };

        mouse {
            bindings = <&mo 4>;
            key-positions = <13 14>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        to_layer_0_disable_alt_ctrl: to_layer_0_disable_alt_ctrl {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&disable_alt_ctrl>;

            label = "TO_LAYER_0_DISABLE_ALT_CTRL";
        };

        disable_alt_ctrl: disable_alt_ctrl {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&to 0 &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL &kt_off LEFT_ALT &kt_off LCTRL>;
            label = "DISABLE_ALT_CTRL";
        };

        kp_to: kp_to {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
            label = "kp_to";
        };

        tab_kt_on_to: tab_kt_on_to {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kt_on MACRO_PLACEHOLDER &macro_param_2to2 &kp_to TAB MACRO_PLACEHOLDER>;
            label = "tab_kt_on_to";
        };

        shift_tab_kt_on_to: shift_tab_kt_on_to {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kt_on MACRO_PLACEHOLDER &macro_param_2to2 &kp_to LS(TAB) MACRO_PLACEHOLDER>;
            label = "shift_tab_kt_on_to";
        };

        zoom_in: zoom_in {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt_on LCTRL &msc SCRL_UP &kt_off LCTRL>;
            label = "ZOOM_IN";
        };

        zoom_out: zoom_out {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt_on LCTRL &msc SCRL_DOWN &kt_off LCTRL>;
            label = "ZOOM_OUT";
        };

        eager_tap_dance: eager_tap_dance {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sl_250 MACRO_PLACEHOLDER>;

            label = "eager_tap_dance";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            display-name = "Lt-to-layer-0";
        };

        lt_to_layer_1: lt_to_layer_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_1";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            display-name = "Lt-to-layer-fast";
        };

        lt_to_layer_0_disable_alt_ctrl: lt_to_layer_0_disable_alt_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_1_DISABLE_ALT_CTRL";
            bindings = <&to_layer_0_disable_alt_ctrl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            display-name = "Lt-to-layer-0-alt-tab";
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        kt_on: key_toggle_on_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle On";
            toggle-mode = "on";
        };

        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };

        td_q_escape: td_q_escape {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Q_ESCAPE";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };

        td_ZenkakuHankaku: td_ZenkakuHankaku {
            compatible = "zmk,behavior-tap-dance";

            // compatible = "zmk,behavior-eager-tap-dance";

            label = "TD_ZENKAKUHANKAKU";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LANGUAGE_2>, <&kp LANGUAGE_1>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kt_on MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &sk MACRO_PLACEHOLDER &macro_param_1to1 &kt_off MACRO_PLACEHOLDER>;
            label = "ALT_TAB";
        };

        windows_sleep: windows_sleep {
            compatible = "zmk,behavior-macro";
            wait-ms = <100>;
            tap-ms = <100>;
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
            label = "WINDOWS_SLEEP";
        };

        send_up: send_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp P &kp ENTER>;
            label = "SEND_UP";
        };

        mod_morph_exclamation: mod_morph_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_EXCLAMATION";
            bindings = <&kp COMMA>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mod_morph_question: mod_morph_question {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_QUESTION";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mod_morph_slash: mod_morph_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_SLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        td_alt_f4: td_alt_f4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ALT_F4";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp LA(F4)>;

            tapping-term-ms = <250>;
        };

        encoder_zoom: encoder_zoom {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&zoom_out>, <&zoom_in>;
        };

        encoder_volume: encoder_volume {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_DOWN>, <&kp C_VOLUME_UP>;
        };

        sl_250: sl_250 {
            compatible = "zmk,behavior-sticky-key";
            label = "SL_250";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <250>;
        };

        td_bt_clear: td_bt_clear {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BT_CLEAR";
            #binding-cells = <0>;
            bindings = <&none>, <&none>, <&bt BT_CLR>;

            tapping-term-ms = <250>;
        };

        td_bt_clear_all: td_bt_clear_all {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BT_CLEAR_ALL";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&none>, <&none>, <&bt BT_CLR_ALL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home_layer {
            bindings = <
&mt ESCAPE Q      &kp W         &kp E         &kp R                  &kp T                                                                             &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                  &kp G        &mkp MB3                                     &lt_to_layer_0 6 MINUS  &kp H        &kp J  &kp K      &kp L    &lt_to_layer_0 5 SEMICOLON
&mt LEFT_SHIFT Z  &mt LC(X) X   &mt LC(C) C   &mt LC(V) V            &kp B        &lt_to_layer_0_disable_alt_ctrl 7 EQUAL      &kp DEL                 &kp N        &kp M  &kp COMMA  &kp DOT  &lt 4 SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt 5 INTERNATIONAL_5  &lt 3 SPACE  &lt 2 INTERNATIONAL_4                        &kp BACKSPACE           &lt 1 ENTER                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        FUNCTION_NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                      &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp N0
&kp MINUS     &kp EQUAL     &kp INT3      &trans        &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans        &trans        &trans        &trans        &trans  &trans      &trans  &trans                                                  &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)                              &kp MINUS        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LS(SQT)   &kp KP_NUMLOCK      &trans  &kp SLASH        &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &kp LS(SQT)
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp LS(MINUS)       &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD
&trans                      &trans           &trans           &trans           &trans        &trans              &trans  &trans                                                              &kp LEFT_SHIFT
            >;
        };

        MOUSE {
            bindings = <
&trans          &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &mkp MB4  &mkp MB5  &trans
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &trans                         &kp LC(LG(LEFT_ARROW))  &kp LG(UP_ARROW)    &kp LC(LG(RIGHT_ARROW))  &kp LEFT_BRACKET     &kp RIGHT_BRACKET
&kp HOME    &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END    &trans      &trans  &kp LG(LEFT_ARROW)      &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)      &kp SQT              &kp NUHS
&kp LC(Z)   &kp LC(X)        &kp LC(C)       &kp LC(V)        &kp LC(B)  &trans      &trans  &kp LS(LG(LEFT_ARROW))  &none               &kp LS(LG(RIGHT_ARROW))  &kp LS(RIGHT_ARROW)  &kp INT1
&trans      &trans           &trans          &trans           &trans     &trans      &trans  &trans                                                                                    &kp RIGHT_SHIFT
            >;
        };

        SCROLL {
            bindings = <
&bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3  &bt BT_SEL 4     &trans                      &trans  &trans    &trans    &trans    &bt BT_SEL 0
&trans        &kp LA(LEFT_BRACKET)  &trans        &kp LS(LA(TAB))  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans        &kp NUMBER_1          &kp NUMBER_2  &kp NUMBER_3     &trans  &trans      &trans  &trans  &trans    &mkp MB4  &mkp MB5  &td_bt_clear
&trans        &trans                &trans        &trans           &trans  &trans      &trans  &trans                                &td_bt_clear_all
            >;
        };

        Function {
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5                         &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)  &trans      &trans  &kp F11  &kp F12  &trans  &trans  &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans      &trans  &trans   &trans   &trans  &trans  &trans
&trans     &trans     &trans     &trans     &trans     &trans      &trans  &trans                            &trans
            >;
        };

        FUNCTION_NUM_1 {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                      &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(N0)
&kp LS(MINUS)     &kp LS(EQUAL)     &kp LS(INT3)      &trans            &trans      &trans      &trans  &trans            &trans            &trans            &trans            &trans
&trans            &trans            &trans            &trans            &trans      &trans      &trans  &trans            &trans            &trans            &trans            &kp LS(INTERNATIONAL_1)
&trans            &trans            &trans            &trans            &trans      &trans      &trans  &trans                                                                  &trans
            >;
        };

        alt_tab {
            bindings = <
&kp TAB  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &kp TAB
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp LA(TAB)
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
